#!/bin/sh

super() {
	if [ "`which sudo`" != "" ]; then
		sudo $@
	elif [ "`which su`" != "" ]; then
		su -c "$@" `whoami`
	else
		$@
	fi
	return
}

get() {
	if [ "`which apt-get`" != "" ]; then
		super "apt-get install $1"
	elif [ "`which yum`" != "" ]; then
		super "yum install $1"
	else
		if [ "$2" = "" ]; then 
			echo "Failed to install $1."
			echo "The following packages are required before running: python java python-setuptools python-virtualenv"
			echo "Exiting."
			exit
		else
			super "$2"
		fi
	fi
	return
}

if [ "`which node`" != "" ]; then 
	engine=node
elif [ "`which java`" != "" ]; then 
	engine=java
else
	echo "You need 1 of the following to build dojo:"
	echo "0. ABORT"
	echo "1. node (preffered)"
	echo "2. java"
	echo ""
	echo "Enter choice [1]:"
	read opt
	if [ "$opt" = "1" ]; then
		get nodejs
		engine=node
	elif [ "$opt" = "2" ]; then
		get java
		engine=java
	else
		exit
	fi
fi

if [ "$1" = "release" ]; then
	build_flags="cssOptimize=comments optimize=shrinksafe layerOptimize=shrinksafe stripConsole=normal"
elif [ "$1" = "debug" ]; then
	build_flags="layerOptimize=false"
else
	echo "Unknown build type."
	echo "Usage: $0 <debug|release> [--commit]"
	exit
fi
shift
commit=0
if [ "$1" = "--commit" ]; then
	commit=1
	shift
fi
common_flags="bin=$engine action=release profile=protvis releaseDir=../../../../res releaseName=dojo_compile $@"

dojo_src="dojo-release-1.7.1-src"
cd compile
if [ ! -d "$dojo_src" ]; then
	wget http://download.dojotoolkit.org/release-1.7.1/$dojo_src.tar.gz
	tar -xf $dojo_src.tar.gz
	rm $dojo_src.tar.gz
fi
cp -rf dojo-extras/* $dojo_src
rm -rf ../res/dojo_compile
cd $dojo_src/util/buildscripts
./build.sh $common_flags $build_flags
cd ../../../../res/dojo_compile
rm -f `find . | grep "\.uncompressed\.js$"`
rm build-report.txt

#link it up
cd ../
rm dojo 2>/dev/null
ln -s dojo_compile dojo
if [ $commit -eq 1 ]; then
	cp -f dojo_compile/dojo/dojo.js dojo_mini/dojo/dojo.js
fi
