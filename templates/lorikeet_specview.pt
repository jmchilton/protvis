<tal:var define="global hash python: unique_dataset()" />
<tal:var define="global opt_charge python: max(1, spectrum['charge'] - 1)" />

<div id="specview_${hash}" class="lorikeet">
</div>
<tal:if condition="python: peptide != None and len(peptide['peptides']) > 1">
    <table>
        <tr><th>Peptide</th><th>Protein</th><th>Engine</th><th>Engine Score</th></tr>
        <tal:for repeat="pep peptide.peptides"><tr id="specview_${hash}_pep_${repeat.pep.index}" tal:attributes="class string:${pep.style}${repeat.pep.odd}" style="cursor:pointer;" onclick="UpdateView(${repeat.pep.index});"><td><tal:echo content="python: render_peptide_lorikeet(pep)" /></td><td>${pep.protein}</td><td style="text-align:center;">${pep.engine}</td><td style="text-align:center;">${pep.score}</td></tr></tal:for>
    </table>
</tal:if>
<script>
    NavigateTo("S${datafile};${spectrum.offset};" + encodeURIComponent("${spectrum.file}.${spectrum.scan}.${spectrum.scan}.${spectrum.charge}"), true);
    SwitchDataset(${datafile}, "data_spectrum");
    var container = dojo.byId("specview_${hash}");

    <tal:if condition="python: peptide == None or len(peptide['peptides']) == 0">
        $("#data_spectrum").empty();
        var spec_view = $("#data_spectrum").specview({
            scanNum: ${spectrum.scan},
            charge: ${spectrum.charge},
            fileName: "${spectrum.file}",
            showMHIonOption: true,
            showInternalIonOption: true,
            showAllTable: true,
            peaks: ${spectrum.ions.ions}
            });
    </tal:if>
    <tal:else condition="python: peptide != None and len(peptide['peptides']) > 0">
        <tal:if condition="python: try_get(peptide, 'peptide') == None">
            var peptides = [<tal:for repeat="pep peptide.peptides">{peptide:"${pep.peptide}", <tal:if condition="python: pep['masstol'] != None">masstol:<tal:echo content="python: round(pep['masstol'], 3)"/>, </tal:if>mods:[<tal:if condition="python: pep.mods != None"><tal:for repeat="mod pep.mods">{index: ${mod.index}, modMass: ${mod.mass}, aminoAcid: '${mod.aa}'},</tal:for></tal:if>]<tal:if condition="python: pep.mods != None">, nterm:${pep.nterm}, cterm:${pep.cterm}</tal:if>},</tal:for>];
            
            function SetPeptide(idx) {
                var neutralMass;
                if(spec_view.precursorMassType == "mono") {
                    neutralMass = Peptide.getNeutralMassMono();
                } else if(spec_view.precursorMassType == "avg") {
                    neutralMass = Peptide.getNeutralMassAvg();
                }
                <tal:if condition="python: len(peptide['peptides']) > 1">
                    dojo.byId("peptide_${hash}").innerHTML = dojo.byId("specview_${hash}_pep_" + idx).firstChild.innerHTML;
                </tal:if>
                <tal:else condition="python: len(peptide['peptides']) == 1">
                    dojo.byId("peptide_${hash}").innerHTML = "<tal:echo content="peptide['peptides'][0]['peptide']" />";
                </tal:else>
            }
            
            <tal:if condition="python: len(peptide['peptides']) > 1">
                function UpdateList(idx) {
                    for (var i = 0; i < <tal:echo content="len(peptide['peptides'])" />; ++i) {
                        var e = document.getElementById("specview_${hash}_pep_" + i);
                        e.className = i == idx ? e.className.replace(/row/, "stuck") : e.className.replace(/stuck/, "row");
                    }
                }
                UpdateView = function(idx) {
                    var pep = peptides[idx];
                    spec_view.SetPeptide({
                        sequence: pep.peptide,
                        variableMods: pep.mods,
                        ntermMod: pep.nterm,
                        ctermMod: pep.cterm,
                    });
                    if (pep.masstol) {
                        dojo.byId("massError_${hash}").value = pep.masstol;
                        SpecView.SetMassError(pep.masstol, dojo.query("#massTypeOpt_${hash} input:checked")[0].value);
                    }
                    UpdateList(idx);
                    SetPeptide(idx);
                }

            </tal:if>
        </tal:if>
        <tal:else condition="python: try_get(peptide, 'peptide') != None">
            var peptides = [{peptide:"${peptide.peptide}", <tal:if condition="python: peptide['masstol'] != None">masstol:<tal:echo content="python: round(peptide['masstol'], 3)"/>, </tal:if>mods:[<tal:if condition="python: peptide.mods != None"><tal:for repeat="mod peptide.mods">{index: ${mod.index}, modMass: ${mod.mass}, aminoAcid: '${mod.aa}'},</tal:for></tal:if>]<tal:if condition="python: peptide.mods != None">, nterm:${peptide.nterm}, cterm:${peptide.cterm}</tal:if>}];
        </tal:else>
        var peaks = ${spectrum.ions.ions};
        var pep = peptides[${init_pep}];
        var spec_view = $("#data_spectrum").specview({
            scanNum: ${spectrum.scan},
            charge: ${spectrum.charge},
            precursorMz: ${peptide.precursor_neutral_mass},
            fileName: "${spectrum.file}",
            sequence: pep.peptide,
            variableMods: pep.mods,
            ntermMod: pep.nterm,
            ctermMod: pep.cterm,
            peaks: peaks,
            residueSpecificNeutralLosses: true,
            ionTableDiv: $("ionTableDiv_${hash}"),
            showMHIonOption: true,
            showInternalIonOption: true,
            showAllTable: true, 
            massError: pep.masstol || 0.5
        });
    </tal:else>
</script>
