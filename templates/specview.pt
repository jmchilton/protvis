<!--<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>Lorikeet Spectrum Viewer</title>
		<script type="text/javascript" src="res/dojo/dojo/dojo.js"></script>
		<script type="text/javascript" src="res/scripts/main.js"></script>
		<script type="text/javascript" src="/res/scripts/specview.js"></script>
		<link href="/res/styles/specview.css" type="text/css" rel="stylesheet" />
		<link href="/res/styles/list.css" type="text/css" rel="stylesheet" />
		<script>
			dojo.require("dojo.fx");
			dojo.require("dojo.query");
			dojo.require("dojo._base.connect");
			dojo.require("dijit.Dialog");
			dojo.require("dojo._base.connect");
			dojo.require("dijit.DynamicTooltip");
			dojo.require("dojox.html.ellipsis");
			dojo.require("dojox.gfx");
		</script>
	</head>
	<body>
		<!-- END DEBUG SECTION -->
<tal:var define="global hash python: unique_dataset()" />
<tal:var define="global opt_charge python: max(1, int(spectrum['charge']) - 1)" />
<div id="specview_${hash}" class="lorikeet">
	<div style="width:100%; padding:5px; text-align:center;">
		<tal:if condition="python: peptide != None">
			<div style="width:100%;"><span id="peptide_${hash}" style="font-weight:bold;"></span>, MH+ <span id="neutralMass_${hash}"></span>, m/z <span id="mz_${hash}"></span></div>
		</tal:if>
		<div style="margin-top:5px; width:100%;" class="font_small">
			File: ${spectrum.file}, Scan: ${spectrum.scan}<tal:if condition="python: peptide != None">, Precursor m/z: ${peptide.precursor_neutral_mass}</tal:if>, Charge: ${spectrum.charge}
		</div>
	</div>
	<table cellpadding="0" cellspacing="5" width="100%">
		<tr>
			<tal:if condition="python: peptide != None"><!--options table-->
				<td valign="top" id="optionsTable" width="1px">
					<table cellpadding="2" cellspacing="2">
						<tr> <!-- Ions -->
							<td class="optionCell">
								<b>Ions:</b>
								<div id="ion_choice_${hash}" style="margin-bottom: 10px">
									<nobr><b>a</b> <input type="checkbox" value="1" id="a_1"/>1<sup>+</sup> <input type="checkbox" value="2" id="a_2"/>2<sup>+</sup> <input type="checkbox" value="3" id="a_3"/>3<sup>+</sup></nobr><br/>
									<nobr><b>b</b> <input type="checkbox" value="1" id="b_1" checked="checked"/>1<sup>+</sup>
										<tal:if condition="python: opt_charge >= 2"><input type="checkbox" value="2" id="b_2" checked="checked"/>2<sup>+</sup></tal:if>
										<tal:else condition="python: opt_charge < 2"><input type="checkbox" value="2" id="b_2"/>2<sup>+</sup></tal:else>
										<tal:if condition="python: opt_charge >= 3"><input type="checkbox" value="3" id="b_3" checked="checked"/>3<sup>+</sup></tal:if>
										<tal:else condition="python: opt_charge < 3"><input type="checkbox" value="3" id="b_3"/>3<sup>+</sup></tal:else>
									</nobr><br/>
									<nobr><b>c</b> <input type="checkbox" value="1" id="c_1"/>1<sup>+</sup> <input type="checkbox" value="2" id="c_2"/>2<sup>+</sup> <input type="checkbox" value="3" id="c_3"/>3<sup>+</sup></nobr><br/>
									<nobr><b>x</b> <input type="checkbox" value="1" id="x_1"/>1<sup>+</sup> <input type="checkbox" value="2" id="x_2"/>2<sup>+</sup> <input type="checkbox" value="3" id="x_3"/>3<sup>+</sup></nobr><br/>
									<nobr><b>y</b> <input type="checkbox" value="1" id="y_1" checked="checked"/>1<sup>+</sup>
										<tal:if condition="python: opt_charge >= 2"><input type="checkbox" value="2" id="y_2" checked="checked"/>2<sup>+</sup></tal:if>
										<tal:else condition="python: opt_charge < 2"><input type="checkbox" value="2" id="y_2"/>2<sup>+</sup></tal:else>
										<tal:if condition="python: opt_charge >= 3"><input type="checkbox" value="3" id="y_3" checked="checked"/>3<sup>+</sup></tal:if>
										<tal:else condition="python: opt_charge < 3"><input type="checkbox" value="3" id="y_3"/>3<sup>+</sup></tal:else>
									</nobr><br/>
									<nobr><b>z</b> <input type="checkbox" value="1" id="z_1"/>1<sup>+</sup> <input type="checkbox" value="2" id="z_2"/>2<sup>+</sup> <input type="checkbox" value="3" id="z_3"/>3<sup>+</sup></nobr><br/>
									<span id="deselectIonsLink_${hash}" style="font-size:8pt;text-decoration: underline; color:sienna;cursor:pointer;">[Deselect All]</span>
								</div>
								<b>Neutral Loss:</b>
								<div id="nl_choice_${hash}">
									<nobr> <input type="checkbox" value="h2o" id="h2o"/> H<sub>2</sub>O (<b>o</b>)</nobr><br>
									<nobr> <input type="checkbox" value="nh3" id="nh3"/> NH<sub>3</sub> (<b>*</b>)</nobr>
								</div>
							</td>
						</tr>
						<tr> <!-- mass type, mass tolerance etc. -->
							<td id="massType_${hash}" class="optionCell">
								<div id="massTypeOpt_${hash}"> Mass Type:<br/>
									<nobr><input type="radio" name="massType" value="mono" checked="checked"/><b>Mono</b> <input type="radio" name="massType" value="avg"/><b>Avg</b></nobr>
								</div>
								<div style="margin-top:10px;">
									<nobr>Mass Tol: <input id="massError_${hash}" type="text" value="0.5" size="4"/></nobr>
								</div>
								<div style="margin-top:10px;" align="center">
									<input id="update_${hash}" name="massType" type="button" value="Update"/>
								</div>
							</td>
						</tr>
						<tr> <!-- peak assignment method -->
							<td class="optionCell">
								<div> Peak Assignment:<br/>
									<input type="radio" name="peakAssignOpt" value="intense" checked="checked"/><b>Most Intense</b><br/>
									<input type="radio" name="peakAssignOpt" value="close"/><b>Nearest Match</b>
								</div>
							</td>
						</tr>
						<tr> <!-- peak labels -->
							<td class="optionCell">
								<div> Peak Labels:<br/>
									<input type="radio" name="peakLabelOpt" value="ion" checked="checked"/><b>Ion</b>
									<input type="radio" name="peakLabelOpt" value="mz"/><b>m/z</b><br/>
									<input type="radio" name="peakLabelOpt" value="none"/><b>None</b>
								</div>
							</td>
						</tr>
						<tr> <!-- precursor -->
							<td class="optionCell">
								<div> Filter:<br/>
									<input type="checkbox" value="precursor" id="hide_precursor_${hash}" checked="checked"/>Precursor Ion
								</div>
							</td>
						</tr>
					</table>
				</td>
			</tal:if>
			<td style="background-color: white; padding:5px; border:1px dotted #cccccc;" valign="middle" align="center">
				<div id="msmsplot_${hash}" align="bottom" style="width:100%;height:500px;"></div>
				<div id="viewOptionsDiv" align="top" style="margin-top:10px;">
					<nobr>
						<span style="width:100%; font-size:8pt; margin-top:5px; color:sienna;">Click and drag in the plot to zoom or pan. Zoom: </span>
						<span id="zoom_${hash}">X:<input name="x" type="checkbox" checked="checked"/>&nbsp;Y:<input name="y" type="checkbox" /></span>
						&nbsp;<input id="resetZoom_${hash}" type="button" value="Zoom Out" />&nbsp;<input id="printLink_${hash}" type="button" value="Print" />
					</nobr>
					&nbsp;&nbsp;
					<nobr><input id="enableTooltip_${hash}" type="checkbox">Enable tooltip</nobr><br/>
				</div>
				<!--placeholder for ms1 plot (if data is available)-->
				<!--if(options.ms1peaks && options.ms1peaks.length > 0) {
					<div id="msplot" style="width:'+options.width+'px;height:100px;"></div>
				}-->
			</td>
			<tal:if condition="python: peptide != None">
				<td valign="top" id="ionTableLoc1" width="1px"><!--placeholder for the ion table-->
					<div id="ionTableDiv_${hash}">
						<!--placeholder for file name, scan number, modifications etc.-->
						<div id="modinfo" style="margin-top:5px;"></div>
					</div>
				</td>
			</tal:if>
		</tr>
	</table>
</div>
<tal:if condition="python: peptide != None and len(peptide['peptides']) > 1">
	<table>
		<tr><th>Peptide</th><th>Protein</th><th>${score}</th></tr>
		<tal:for repeat="pep peptide.peptides"><tr id="specview_${hash}_pep_${repeat.pep.index}" tal:attributes="class string:row${repeat.pep.odd}" style="cursor:pointer;" onclick="UpdateView(${repeat.pep.index});"><td><tal:echo content="python: render_peptide_lorikeet(pep)" /></td><td>${pep.protein}</td><td style="text-align:center;">${pep.score}</td></tr></tal:for>
	</table>
</tal:if>
<script>
	SwitchDataset(${datafile}, "data_spectrum");
	function UpdateTitle() {
		var container = dojo.byId("specview_${hash}");
		container.byId("mz").innerHTML = SpecView.Ion.getMz(neutralMass, ${spectrum.charge});
		container.byId("neutralMass").innerHTML = (container.byId("massTypeOpt_avg").checked ? SpecView.Peptide.getNeutralMassAvg() : SpecView.Peptide.getNeutralMassMono()) + Ion.MASS_PROTON;
	}

	var container = dojo.byId("specview_${hash}");

	<tal:if condition="python: peptide == None">
		var SpecView = new SpecViewer(dojo.byId("msmsplot_${hash}"), {				
			scanNum: ${spectrum.scan},
			charge: ${spectrum.charge},
			fileName: "${spectrum.file}",
			peaks: ${spectrum.ions.ions},
			ionTableContainer: dojo.byId("ionTableDiv_${hash}")
		});
	</tal:if>
	<tal:else condition="python: peptide != None">
		<tal:if condition="python: try_get(peptide, 'peptide') == None">
			var peptides = [<tal:for repeat="pep peptide.peptides">["${pep.peptide}"<tal:if condition="python: pep.mods != None">, [<tal:for repeat="mod pep.mods">{index: ${mod.index}, modMass: ${mod.mass}, aminoAcid: '${mod.aa}'},</tal:for>], ${pep.nterm}, ${pep.cterm}</tal:if>],</tal:for>];
			
			function SetPeptide(idx) {
				var neutralMass;
				if(SpecView.Options.massTypeOpt == "mono") {
					neutralMass = Peptide.getNeutralMassMono();
				} else if(SpecView.Options.massTypeOpt == "avg") {
					neutralMass = Peptide.getNeutralMassAvg();
				}
				<tal:if condition="python: len(peptide['peptides']) > 1">
					dojo.byId("peptide_${hash}").innerHTML = dojo.byId("specview_${hash}_pep_" + idx).firstChild.innerHTML;
				</tal:if>
				<tal:else condition="python: len(peptide['peptides']) == 1">
					dojo.byId("peptide_${hash}").innerHTML = "<tal:echo content="peptide['peptides'][0]['peptide']" />";
				</tal:else>
				dojo.byId("neutralMass_${hash}").innerHTML = (neutralMass + Ion.MASS_PROTON).toFixed(4);
				dojo.byId("mz_${hash}").innerHTML = Ion.getMz(neutralMass, ${spectrum.charge}).toFixed(4);
			}
			
			<tal:if condition="python: len(peptide['peptides']) > 1">
				function UpdateList(idx) {
					for (var i = 0; i < <tal:echo content="len(peptide['peptides'])" />; ++i) {
						var e = document.getElementById("specview_${hash}_pep_" + i);
						e.className = i == idx ? e.className.replace(/row/, "stuck") : e.className.replace(/stuck/, "row");
					}
				}
				UpdateView = function(idx) {
					var pep = peptides[idx];
					SpecView.SetPeptide({
						sequence: pep[0],
						variableMods: pep[1] ? pep[1] : [],
						ntermMod: pep[2] ? pep[2] : 0,
						ctermMod: pep[3] ? pep[3] : 0,
					});
					UpdateList(idx);
					SetPeptide(idx);
				}

				UpdateList(${init_pep});
			</tal:if>
		</tal:if>
		<tal:else condition="python: try_get(peptide, 'peptide') != None">
			var peptides = [["${peptide.peptide}"<tal:if condition="python: peptide.mods != None">, [<tal:for repeat="mod peptide.mods">{index: ${mod.index}, modMass: ${mod.mass}, aminoAcid: '${mod.aa}'},</tal:for>], ${peptide.nterm}, ${peptide.cterm}</tal:if>]];
		</tal:else>
		var peaks = ${spectrum.ions.ions};
		var pep = peptides[${init_pep}];
		var SpecView = new SpecViewer(dojo.byId("msmsplot_${hash}"), {
			scanNum: ${spectrum.scan},
			charge: ${spectrum.charge},
			precursorMz: ${peptide.precursor_neutral_mass},
			fileName: "${spectrum.file}",
			sequence: pep[0],
			variableMods: pep[1] ? pep[1] : [],
			ntermMod: pep[2] ? pep[2] : 0,
			ctermMod: pep[3] ? pep[3] : 0,
			peaks: peaks,
			ionTableContainer: dojo.byId("ionTableDiv_${hash}")
		});
		
		SetPeptide(${init_pep});

		dojo.query("#massType_${hash} input[name$=massType]", container).forEach(function(node, index, arr) {
			dojo.connect(node, "onclick", null, function(evt) {
				SpecView.SetMassError(parseFloat(dojo.byId("massError_${hash}").value), dojo.query("#massTypeOpt_${hash} input:checked")[0].value);
			});
		});
		dojo.query("#ion_choice_${hash} input", container).forEach(function(node, index, arr) {
			dojo.connect(node, "onclick", null, function(evt) {
				var ions = [];
				dojo.query("#ion_choice_${hash} input:checked", container).forEach(function(node, index, arr) {
					ions.push(node.id.split("_"));
			  	});
			  	SpecView.SetSelectedIons(ions);
			});
		});
		dojo.query("#nl_choice_${hash} input", container).forEach(function(node, index, arr) {
			dojo.connect(node, "onclick", null, function(evt) {
				var neutralLosses = [];
				dojo.query("#nl_choice_${hash} input:checked", container).forEach(function(node, index, arr) {
					neutralLosses.push(node.value);
				});
			  	SpecView.SetNeutralLosses(neutralLosses);
			});
		});
		dojo.query("#hide_precursor_${hash}", container).forEach(function(node, index, arr) {
			dojo.connect(node, "onclick", null, function(evt) {
		  		SpecView.SetHidePrecursor(node.checked);
			});
		});
		dojo.query("input[name$=peakAssignOpt]", container).forEach(function(node, index, arr) {
			dojo.connect(node, "onclick", null, function(evt) {
				
				SpecView.SetPeakAssignmentType(dojo.query("input[name$=peakAssignOpt]:checked", container)[0].value);
			});
		});
		dojo.query("input[name$=peakLabelOpt]", container).forEach(function(node, index, arr) {
			dojo.connect(node, "onclick", null, function(evt) {
				SpecView.SetPeakLabelType(dojo.query("input[name$=peakLabelOpt]:checked", container)[0].value);
			});
		});
		/*dojo.query("#deselectIonsLink_${hash}", container).forEach(function(node, index, arr) {
			dojo.connect(node, "onclick", null, function(evt) {
				ionChoiceContainer.find("input:checkbox:checked").each(function() {
					node.checked = "";
				});
				plotAccordingToChoices();
			});
		});*/
	</tal:else>

	dojo.query("#zoom_${hash} input", container).forEach(function(node, index, arr) {
		dojo.connect(node, "onclick", null, function(evt) {
			var zoom = "";
			dojo.query("#zoom_${hash} input:checked", container).forEach(function(node, index, arr) {
				zoom += node.name;
			});
			SpecView.SetAxisZoom(zoom);
		});
	});
	dojo.query("#resetZoom_${hash}", container).forEach(function(node, index, arr) {
		dojo.connect(node, "onclick", null, function(evt) {
			SpecView.ResetZoom();
		});
	});

	/*function printPlot() {
		dojo.query("#printLink_${hash}", container).click(function() {
	
			// create another div and move the plots into that div
			$(document.body).append('<div id="tempPrintDiv"></div>');
			$("#tempPrintDiv").append($("#lorikeet_content").detach());
			$("#tempPrintDiv").siblings().addClass("noprint");
	
	
			container.find(".bar").addClass('noprint');
			container.find('#optionsTable').addClass('noprint');
			container.find('#ionTableLoc1').addClass('noprint');
			container.find('#ionTableLoc2').addClass('noprint');
			container.find('#viewOptionsDiv').addClass('noprint');
	
			plotOptions.series.peaks.print = true; // draw the labels in the DOM for sharper print output
			plotAccordingToChoices();
			window.print();
	
	
			// remove the class after printing so that if the user prints 
			// via the browser's print menu the whole page is printed
			container.find(".bar").removeClass('noprint');
			container.find('#optionsTable').removeClass('noprint');
			container.find('#ionTableLoc1').removeClass('noprint');
			container.find('#ionTableLoc2').removeClass('noprint');
			container.find('#viewOptionsDiv').removeClass('noprint');
			$("#tempPrintDiv").siblings().removeClass("noprint");
	
	
			plotOptions.series.peaks.print = false; // draw the labels in the canvas
			plotAccordingToChoices();
	
			// move the plots back to the original location
			$("#lorikeet").append($("#lorikeet_content").detach());
			$("#tempPrintDiv").remove();
	
	
			//var canvas = plot.getCanvas();
			//var iWidth=3500;
			//var iHeight = 3050;
			//var oSaveCanvas = document.createElement("canvas");
			//oSaveCanvas.width = iWidth;
			//oSaveCanvas.height = iHeight;
			//oSaveCanvas.style.width = iWidth+"px";
			//oSaveCanvas.style.height = iHeight+"px";
			//var oSaveCtx = oSaveCanvas.getContext("2d");
			//oSaveCtx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, iWidth, iHeight);
	
			//var dataURL = oSaveCanvas.toDataURL("image/png");
			//window.location = dataURL;
	
	
		});
	}*/
</script>
<!-- BEGIN DEBUG SECTION
	</body>
</html> -->
