<tal:var define="global hash python: unique_dataset()" />
<table class="graph" cellpadding="0" cellspacing="5" width="100%" style="height:100%;"><tr>
	<td class="options" width="180">
		<div class="group">
			<div class="head">Zoom/Pan:</div>
			<div id="zoom_${hash}">&nbsp;X:<input name="x" type="checkbox" checked="checked"/>&nbsp;Y:<input name="y" type="checkbox" checked="checked" /></div>
			<nobr><button id="zoomundo_${hash}">Undo Zoom</button><button id="zoomout_${hash}">Show All</button></nobr>
			<div class="tip">Click and drag in the plot to zoom or pan.</div>
		</div>
		<div class="group">
			<div class="head">Show:</div>
			<div id="visible_${hash}">
				<input style="margin-left:0" name="grid" type="checkbox" checked="checked"/>Grid Lines<br/>
				<input style="margin-left:0" name="ms1smooth" type="checkbox"/>MS1 Smoothed<br/>
				<input style="margin-left:0" name="ms1points" type="checkbox" checked="checked"/>MS1 Data Points<br/>
				<input id="ms2_${hash}" style="margin-left:0" name="ms2" type="checkbox" checked="checked"/>MS2
			</div>
			<div class="head2">MS1 Contrast:</div>
			<div id="contrast_${hash}"></div>
		</div>
		<div class="group">
			<div class="head">Cursor:</div>
			<table cellpadding="0" cellspacing="0" style="border:none" width="100%">
				<tr><td width="1" style="text-align:right">Time:</td><td><div id="cx_${hash}"></div></td></tr>
				<tr><td style="text-align:right">m/z:</td><td><div id="cy_${hash}"></div></td></tr>
			</table>
		</div>
	</td>
	<td class="plot">
		<div id="lcview_${hash}" style="width:100%; height:100%; min-width:100px; min-height:600px; overflow:hidden;"></div>
	</td>
</tr></table>
<script>
	dojo.require("dijit.form.HorizontalSlider");

	var zooms = new Array();
	var data = [<tal:for repeat="py points">[<tal:for repeat="px py">[<tal:for repeat="p px">[<tal:echo content="python: str(round(p[0],3)) + ',' + str(round(p[1],3)) + ',' + str(p[2]) + ',' + str(p[3])"/>],</tal:for>],</tal:for>],</tal:for>];
	
	var lc = new LcPlot(dojo.byId("lcview_${hash}"), {
		axis: {
			x: {
				min: <tal:echo content="python: results[0]"/>,
				max: <tal:echo content="python: results[1]"/>,
			},
			y: {
				min: <tal:echo content="python: results[2]"/>,
				max: <tal:echo content="python: results[3]"/>,
			}
		},
		maxIntensity: <tal:echo content="python: results[4]"/>,
		datafile: ${info.datafile},
		file: "${info.file}",
		selection: {
			axis: "xy",
			data: null,
			callback: function(isRange, range) {
				if (isRange) {
					var vr = lc.ViewRange;
					if (lc.Zoom(range)) {
						zooms.push(vr);
					}
				} else if (dojo.byId("ms2_${hash}").checked) {
					if (lc.Closest && lc.Closest.i >= 0 && lc.Closest.dist < 100) {
						var p = data[lc.Closest.iy][lc.Closest.ix][lc.Closest.i];
						ShowSpectrum(${info.datafile}, p[3], "<tal:echo content="python: results[5]"/>." + p[2] + "." + p[2] + ".0");
					}
				}
			}
		},
		show: {
			ms1smooth: false,
			ms1points: true,
			ms2: true
		},
		tooltip: {
			enable: true,
			show: function(evt, pt, obj) {
				var tol = 10;
				var x = (pt.x - obj.Padding[0]) / obj.ScaleX + obj.ViewRange.x.min;
				var y = (obj.Height + obj.Padding[1] - pt.y) / obj.ScaleY + obj.ViewRange.y.min;
				dojo.byId("cx_${hash}").innerHTML = x.toFixed(3) + " min";
				dojo.byId("cy_${hash}").innerHTML = y.toFixed(3);
				var closest = { i: -1, dist: Number.POSITIVE_INFINITY };
				var ixs = Math.floor((x - tol - obj.DataRange.x.min) / obj.DataRange.x.range * 16);
				var ixe = Math.min(Math.floor((x + tol - obj.DataRange.x.min) / obj.DataRange.x.range * 16), 15);
				var iys = Math.floor((y - tol - obj.DataRange.y.min) / obj.DataRange.y.range * 16);
				var iye = Math.min(Math.floor((y + tol - obj.DataRange.y.min) / obj.DataRange.y.range * 16), 15);
				for (var iy = iys; iy <= iye; ++iy) {
					for (var ix = ixs; ix <= ixe; ++ix) {
						var points = data[iy][ix];
						for (var i in points) {
							var p = points[i];
							if (p[0] >= obj.ViewRange.x.min && p[0] <= obj.ViewRange.x.max && p[1] > obj.ViewRange.y.min && p[1] < obj.ViewRange.y.max) {
								var dx = (p[0] - x) * obj.ScaleX;
								var dy = (p[1] - y) * obj.ScaleY;
								var dist = dx * dx + dy * dy;
								if (dist <= closest.dist) {
									closest = {iy:iy, ix:ix, i:i, dist:dist};
								}
							}
						}
					}
				}
				if (closest.i >= 0 && Math.sqrt(closest.dist) < tol) {
					var p = data[closest.iy][closest.ix][closest.i];
					var elem = dojo.position(obj.Container, false);
					if (!this.Tooltip || this.Tooltip.i != closest.i) {
						this.Tooltip = {i:closest.i, pos:{x: Math.round((p[0] - obj.ViewRange.x.min) * obj.ScaleX + obj.Padding[0] + elem.x + window.scrollX + 5), y: Math.round(obj.GraphBottom - (p[1] - obj.ViewRange.y.min) * obj.ScaleY + elem.y + window.scrollY), w: -10, h: 1}};
						dijit.Tooltip.show('<div style="white-space:nowrap;">Retention Time: ' + p[0].toFixed(3) + "<br/>m/z: " + p[1].toFixed(3) + "<br/>Spectrum: <tal:echo content="python: results[5]"/>." + p[2] + "." + p[2] + "</div>", this.Tooltip.pos, ["after", "before"], false, "ltr");
						this.Tooltip.node = dijit.Tooltip._masterTT.domNode;
						this.Tooltip.node.setAttribute("style", "pointer-events:none;" + this.Tooltip.node.getAttribute("style"));
					}
					lc.Closest = closest;
				} else {
					if (this.Tooltip) {
						dijit.Tooltip.hide(this.Tooltip.pos);
						this.Tooltip = null;
					}
					lc.Closest = null;
				}
				
			},
			hide: function() {
				dojo.byId("cx_${hash}").innerHTML = "";
				dojo.byId("cy_${hash}").innerHTML = "";
				if (this.Tooltip) {
					dijit.Tooltip.hide(this.Tooltip.pos);
					this.Tooltip = null;
				}
			}
		}
	});

	var contrast = new dijit.form.HorizontalSlider({
			name: "contrast",
			value: 0.5,
			minimum: 0.01,
			maximum: 1,
			intermediateChanges: false,
			pageIncrement: 5,
			style: "width:170px;",
			onChange: function(value){
				lc.SetContrast(value);
			}
		}, "contrast_${hash}");
	
	dojo.connect(dojo.byId("zoomundo_${hash}"), "onclick", null, function(evt) {
		if (zooms.length > 0) {
			lc.Zoom(zooms.pop());
		}
	});
	
	dojo.connect(dojo.byId("zoomout_${hash}"), "onclick", null, function(evt) {
		var vr = lc.ViewRange;
		if (lc.Zoom()) {
			zooms.push(vr);
		}
	});
	
	dojo.query("#zoom_${hash} input").forEach(function(node, index, arr) {
		dojo.connect(node, "onclick", null, function(evt) {
			var zoom = "";
			dojo.query("#zoom_${hash} input:checked").forEach(function(node, index, arr) {
				zoom += node.name;
			});
			lc.SetSelection(zoom);
		});
	});
	
	dojo.query("#visible_${hash} input").forEach(function(node, index, arr) {
		dojo.connect(node, "onclick", null, function(evt) {
			var visible = {ms1smooth:false, ms1points:false, ms2: false};
			var grid = "";
			dojo.query("#visible_${hash} input:checked").forEach(function(node, index, arr) {
				if (node.name == "grid") {
					grid = "xy";
				} else {
					visible[node.name] = true;
				}
			});
			lc.SetGrid(grid);
			lc.SetVisible(visible);
			lc.SetTooltip(visible.ms2);
		});
	});
</script>
